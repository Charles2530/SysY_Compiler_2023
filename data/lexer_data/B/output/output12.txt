CONSTTK const
INTTK int
IDENFR Mod
ASSIGN =
INTCON 10007
SEMICN ;
CONSTTK const
INTTK int
IDENFR Map
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
COMMA ,
IDENFR Bound
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR T
COMMA ,
IDENFR f
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR ori
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR calc
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR Map
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR Bound
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
IDENFR Bound
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR k
LSS <
IDENFR Bound
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
LPARENT (
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MOD %
IDENFR Mod
RPARENT )
MOD %
IDENFR Mod
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR Map
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR sum
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR Bound
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
IDENFR Bound
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR Map
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR getans
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR Bound
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Copy
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR Map
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR Map
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR Map
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR Map
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR T
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR Copy
LPARENT (
IDENFR temp
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR T
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR T
DIV /
INTCON 2
MULT *
INTCON 2
NEQ !=
IDENFR T
RPARENT )
LBRACE {
IDENFR calc
LPARENT (
IDENFR ori
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IDENFR T
ASSIGN =
IDENFR T
DIV /
INTCON 2
SEMICN ;
IDENFR calc
LPARENT (
IDENFR temp
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR Bound
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "f%d: %d\n"
COMMA ,
IDENFR f
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR getans
LPARENT (
IDENFR ori
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "ori00:%d\n"
COMMA ,
IDENFR ori
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
