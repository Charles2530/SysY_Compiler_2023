INTTK int
IDENFR oneDimensionalArray
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR twoDimensionalArray
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR copyArray1D
LPARENT (
INTTK int
IDENFR source
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR oneDimensionalArray
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR source
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR copyArray2D
LPARENT (
INTTK int
IDENFR source
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR twoDimensionalArray
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR source
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR copy1DInto2D
LPARENT (
INTTK int
IDENFR source
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR row
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR twoDimensionalArray
LBRACK [
IDENFR row
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR source
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR constant1D
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
IDENFR constant2D
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
COMMA ,
INTCON 14
RBRACE }
COMMA ,
LBRACE {
INTCON 20
COMMA ,
INTCON 21
COMMA ,
INTCON 22
COMMA ,
INTCON 23
COMMA ,
INTCON 24
RBRACE }
COMMA ,
LBRACE {
INTCON 30
COMMA ,
INTCON 31
COMMA ,
INTCON 32
COMMA ,
INTCON 33
COMMA ,
INTCON 34
RBRACE }
COMMA ,
LBRACE {
INTCON 40
COMMA ,
INTCON 41
COMMA ,
INTCON 42
COMMA ,
INTCON 43
COMMA ,
INTCON 44
RBRACE }
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR copyArray1D
LPARENT (
IDENFR constant1D
RPARENT )
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR oneDimensionalArray
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR i
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "1D array function pass!\n"
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR yuming
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR yuming
LSS <
INTCON 1000
SEMICN ;
RPARENT )
LBRACE {
IDENFR yuming
ASSIGN =
IDENFR yuming
MULT *
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR yuming
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
LBRACE {
INTTK int
IDENFR yuming
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR yuming
LSS <
INTCON 1000
SEMICN ;
RPARENT )
LBRACE {
IDENFR yuming
ASSIGN =
IDENFR yuming
MULT *
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR yuming
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR yuming
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR yuming
LSS <
INTCON 1000
SEMICN ;
RPARENT )
LBRACE {
IDENFR yuming
ASSIGN =
IDENFR yuming
MULT *
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR yuming
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR copyArray2D
LPARENT (
IDENFR constant2D
RPARENT )
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR twoDimensionalArray
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
NEQ !=
IDENFR i
MULT *
INTCON 10
PLUS +
IDENFR j
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR j
NEQ !=
INTCON 5
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "2D array function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
LBRACE {
INTTK int
IDENFR yuming
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR yuming
LSS <
INTCON 1000
SEMICN ;
RPARENT )
LBRACE {
IDENFR yuming
ASSIGN =
IDENFR yuming
MULT *
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR yuming
RPARENT )
SEMICN ;
RBRACE }
IDENFR copy1DInto2D
LPARENT (
IDENFR constant2D
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR twoDimensionalArray
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR i
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR yuming
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR yuming
LSS <
INTCON 1000
SEMICN ;
RPARENT )
LBRACE {
IDENFR yuming
ASSIGN =
IDENFR yuming
MULT *
INTCON 2
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR yuming
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "1D array in 2D array function pass!\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Test2 Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
