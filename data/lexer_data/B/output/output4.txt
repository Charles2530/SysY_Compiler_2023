CONSTTK const
INTTK int
IDENFR _a
ASSIGN =
INTCON 3
PLUS +
INTCON 2
PLUS +
MINU -
PLUS +
INTCON 2
MOD %
INTCON 2
DIV /
INTCON 1
COMMA ,
IDENFR _12
ASSIGN =
INTCON 85
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 3
PLUS +
LPARENT (
INTCON 1
MULT *
INTCON 2
RPARENT )
DIV /
INTCON 2
MULT *
IDENFR _a
SEMICN ;
CONSTTK const
INTTK int
IDENFR arrayA
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
IDENFR arrayA
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array_c
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR array_d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 12
COMMA ,
IDENFR c_1
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR _a
MULT *
IDENFR _a
PLUS +
IDENFR _a
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR _func1
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR _a
ASSIGN =
INTCON 10
COMMA ,
IDENFR _12
ASSIGN =
INTCON 12
SEMICN ;
INTTK int
IDENFR array_d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
IDENFR array_c
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 3
PLUS +
LPARENT (
INTCON 1
MULT *
INTCON 20
RPARENT )
DIV /
INTCON 2
MULT *
IDENFR _a
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 121
COMMA ,
IDENFR c_1
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR _a
MULT *
IDENFR _a
PLUS +
IDENFR _a
PLUS +
IDENFR arrayA
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_a=%d\n"
COMMA ,
IDENFR _a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_a=%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
IDENFR a
ASSIGN =
IDENFR a
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
ELSETK else
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR a
LSS <
INTCON 10
AND &&
IDENFR a
GRE >
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 5
OR ||
IDENFR a
EQL ==
INTCON 6
AND &&
IDENFR a
NEQ !=
INTCON 5
MULT *
INTCON 1
MOD %
INTCON 5
AND &&
IDENFR a
LSS <
INTCON 10
AND &&
IDENFR a
GRE >
INTCON 5
AND &&
IDENFR a
GEQ >=
INTCON 5
AND &&
IDENFR a
LEQ <=
INTCON 6
AND &&
NOT !
LPARENT (
INTCON 1
MINU -
INTCON 1
RPARENT )
AND &&
IDENFR a
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR a
LSS <
INTCON 10
SEMICN ;
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR _a
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR _a
MOD %
INTCON 2
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "what you enter in is:%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_a=%d\n"
COMMA ,
IDENFR _a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "array_c[0] is:%d\n"
COMMA ,
IDENFR array_c
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "array_d[0][0] is:%d\n"
COMMA ,
IDENFR array_d
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "array_d[1][0] is:%d\n"
COMMA ,
IDENFR array_d
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR _func1
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR ext
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR x
SEMICN ;
RPARENT )
LBRACE {
IDENFR ext
ASSIGN =
IDENFR x
MOD %
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR ext
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
DIV /
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\nOver"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
