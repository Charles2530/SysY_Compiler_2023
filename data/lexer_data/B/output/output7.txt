VOIDTK void
IDENFR fun_1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IDENFR fun_2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
OR ||
IDENFR a
LSS <
IDENFR b
OR ||
IDENFR a
GRE >
IDENFR b
OR ||
IDENFR a
GEQ >=
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
LEQ <=
IDENFR c
AND &&
IDENFR b
EQL ==
IDENFR a
AND &&
IDENFR a
NEQ !=
IDENFR c
RPARENT )
LBRACE {
RBRACE }
RBRACE }
RBRACE }
VOIDTK void
IDENFR fun_5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR t1
ASSIGN =
INTCON 2
COMMA ,
IDENFR t2
ASSIGN =
INTCON 1
COMMA ,
IDENFR t3
SEMICN ;
IDENFR fun_4
LPARENT (
IDENFR t1
COMMA ,
IDENFR t2
COMMA ,
IDENFR t3
MINU -
IDENFR t2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR t1
PLUS +
IDENFR t2
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR fun_4
LPARENT (
IDENFR t1
COMMA ,
IDENFR t2
COMMA ,
IDENFR t3
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR t2
PLUS +
IDENFR t2
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR fun_4
LPARENT (
IDENFR t2
COMMA ,
IDENFR t1
COMMA ,
IDENFR t3
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR t3
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR t3
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR fun_6
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR var_1
SEMICN ;
IDENFR var_1
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR var_1
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 3
SEMICN ;
IDENFR var_1
ASSIGN =
INTCON 3
MULT *
LPARENT (
IDENFR var_1
DIV /
LPARENT (
MINU -
INTCON 2
RPARENT )
PLUS +
INTCON 1
MOD %
LPARENT (
INTCON 23
MULT *
PLUS +
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
IDENFR var_1
ASSIGN =
IDENFR var_1
PLUS +
IDENFR var_1
DIV /
IDENFR var_1
SEMICN ;
LBRACE {
INTTK int
IDENFR var_1
SEMICN ;
INTTK int
IDENFR var_2
LBRACK [
INTCON 23
RBRACK ]
SEMICN ;
IDENFR var_1
ASSIGN =
INTCON 0
SEMICN ;
IDENFR var_1
ASSIGN =
INTCON 3
MOD %
INTCON 5
SEMICN ;
IDENFR var_1
ASSIGN =
IDENFR var_1
MULT *
INTCON 5
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_7
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funInt
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR var_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR var_2
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR var_1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IDENFR var_2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 0
COMMA ,
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR a
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR c
PLUS +
IDENFR d
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
NOT !
IDENFR a
OR ||
IDENFR i
GEQ >=
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 2
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR fun_6
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR fun_7
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fun_7
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373385"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "2"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "3"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "4"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "5"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "6"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "7"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "8"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "9"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
