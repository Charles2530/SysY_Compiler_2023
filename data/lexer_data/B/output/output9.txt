CONSTTK const
INTTK int
IDENFR MAX
ASSIGN =
INTCON 6
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR num
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR sum
SEMICN ;
INTTK int
IDENFR k
SEMICN ;
IDENFR num
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR num
GEQ >=
INTCON 2
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR num
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is not a prime number\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is a prime number\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is neither prime nor composite\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 0
AND &&
IDENFR d
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "c and d are both positive\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Neither c nor d are positive\n"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
GRE >
INTCON 3
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR k
LSS <
IDENFR MAX
SEMICN ;
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR k
EQL ==
INTCON 3
OR ||
IDENFR k
EQL ==
INTCON 4
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
