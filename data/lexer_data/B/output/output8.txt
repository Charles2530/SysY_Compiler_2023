CONSTTK const
INTTK int
IDENFR constVar_0
ASSIGN =
INTCON 0
COMMA ,
IDENFR constVar_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR constArr1d_0
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR constArr2d_0
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_0
SEMICN ;
INTTK int
IDENFR var_1
ASSIGN =
INTCON 1
COMMA ,
IDENFR var_2
ASSIGN =
INTCON 2
COMMA ,
IDENFR var_3
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR arr1d_0
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr1d_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr1d_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR arr1d_3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2d_0
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr2d_1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR voidFunc_0
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_1
LPARENT (
INTTK int
IDENFR var_0
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_2
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_3
LPARENT (
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_4
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR var_1
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_5
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_6
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_7
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_8
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR voidFunc_9
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_10
LPARENT (
INTTK int
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_11
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_12
LPARENT (
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_13
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR var_1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_14
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_15
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_16
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_17
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_18
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_19
LPARENT (
INTTK int
IDENFR var_0
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_20
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_21
LPARENT (
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_22
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR var_1
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_23
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_24
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_25
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidFunc_26
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_1
LPARENT (
INTTK int
IDENFR var_0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_2
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_3
LPARENT (
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_4
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR var_1
RPARENT )
LBRACE {
RETURNTK return
INTCON 4
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_5
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 5
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_6
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 6
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_7
LPARENT (
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 7
SEMICN ;
RBRACE }
INTTK int
IDENFR intFunc_8
LPARENT (
INTTK int
IDENFR var_0
COMMA ,
INTTK int
IDENFR arr1d_0
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arr2d_0
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 8
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR voidFunc_9
LPARENT (
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
MINU -
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
PLUS +
MINU -
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
MINU -
PLUS +
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
PLUS +
IDENFR var_0
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
MINU -
IDENFR var_0
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
MULT *
IDENFR var_0
SEMICN ;
IDENFR var_0
ASSIGN =
LPARENT (
IDENFR var_0
RPARENT )
MULT *
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
MULT *
IDENFR intFunc_0
LPARENT (
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
MULT *
INTCON 0
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
MULT *
IDENFR intFunc_8
LPARENT (
IDENFR var_1
COMMA ,
IDENFR arr1d_0
COMMA ,
IDENFR arr2d_1
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
DIV /
IDENFR var_1
SEMICN ;
IDENFR var_0
ASSIGN =
LPARENT (
IDENFR var_0
RPARENT )
DIV /
INTCON 1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
DIV /
IDENFR var_1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
DIV /
INTCON 1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
DIV /
IDENFR intFunc_1
LPARENT (
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_0
MOD %
IDENFR var_2
SEMICN ;
IDENFR var_0
ASSIGN =
LPARENT (
IDENFR var_0
RPARENT )
MOD %
INTCON 1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
MOD %
IDENFR var_1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
MOD %
INTCON 1
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR intFunc_0
LPARENT (
RPARENT )
MOD %
IDENFR intFunc_1
LPARENT (
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR var_1
SEMICN ;
IDENFR var_0
ASSIGN =
LPARENT (
IDENFR var_1
RPARENT )
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR arr1d_1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR var_0
ASSIGN =
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR var_0
SEMICN ;
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR arr1d_1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR arr1d_0
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR arr2d_0
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR arr2d_0
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR var_0
SEMICN ;
IDENFR arr2d_0
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR arr1d_1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR arr2d_0
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr2d_2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR arr2d_1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR arr2d_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR arr2d_1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR var_0
EQL ==
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR var_1
GRE >
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
GEQ >=
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
EQL ==
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
NEQ !=
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
LEQ <=
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
LSS <
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
AND &&
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR var_1
OR ||
IDENFR var_0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
FORTK for
LPARENT (
SEMICN ;
NOT !
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IDENFR var_0
ASSIGN =
IDENFR var_0
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR var_0
LSS <
INTCON 10
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d9373533 "
COMMA ,
IDENFR constVar_1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n19373533"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
