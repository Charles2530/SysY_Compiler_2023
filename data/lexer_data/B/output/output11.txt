CONSTTK const
INTTK int
IDENFR p
ASSIGN =
INTCON 88
SEMICN ;
INTTK int
IDENFR q
ASSIGN =
INTCON 66
COMMA ,
IDENFR r
ASSIGN =
INTCON 155
SEMICN ;
INTTK int
IDENFR s
ASSIGN =
INTCON 15
SEMICN ;
INTTK int
IDENFR max
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR min
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR scan
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR tmp
PLUS +
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR noUse
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR mid
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR max
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
EQL ==
IDENFR min
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR max
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
NEQ !=
IDENFR min
LPARENT (
IDENFR a
COMMA ,
IDENFR c
RPARENT )
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR factorial
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR n
SEMICN ;
INTTK int
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GRE >
INTCON 20
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Your Num is too Big!!!\n"
RPARENT )
SEMICN ;
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
SEMICN ;
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR max
LPARENT (
IDENFR min
LPARENT (
IDENFR p
COMMA ,
IDENFR q
RPARENT )
COMMA ,
IDENFR max
LPARENT (
IDENFR s
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR min
LPARENT (
IDENFR r
COMMA ,
IDENFR scan
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
ASSIGN =
INTCON 58
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 65535
SEMICN ;
INTTK int
IDENFR bool1
ASSIGN =
INTCON 0
COMMA ,
IDENFR bool2
ASSIGN =
INTCON 1
COMMA ,
IDENFR bool3
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp
ASSIGN =
MINU -
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373022\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR c
MINU -
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b:%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
LPARENT (
IDENFR bool2
PLUS +
IDENFR bool3
RPARENT )
SEMICN ;
IDENFR bool1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR bool1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bool1 is false!\n"
RPARENT )
SEMICN ;
RBRACE }
INTCON 2147483647
SEMICN ;
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR print
LPARENT (
IDENFR tmp
PLUS +
INTCON 10
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR scan
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LEQ <=
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Good!,Num is %d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
DIV /
INTCON 6
MULT *
IDENFR c
MOD %
INTCON 2
MINU -
LPARENT (
IDENFR bool1
MULT *
IDENFR bool3
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
LSS <
IDENFR c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Oh!?\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR mid
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
MOD %
IDENFR d
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR noUse
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
