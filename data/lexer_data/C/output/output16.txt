CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR d
COMMA ,
IDENFR e
ASSIGN =
INTCON 1
PLUS +
INTCON 2
SEMICN ;
INTTK int
IDENFR f
SEMICN ;
INTTK int
IDENFR double2
LPARENT (
INTTK int
IDENFR x1
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR x1
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
MULT *
IDENFR x1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
INTCON 2
MULT *
MINU -
IDENFR x1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR x1
COMMA ,
INTTK int
IDENFR x2
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR x1
PLUS +
IDENFR x2
SEMICN ;
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR sub
LPARENT (
INTTK int
IDENFR x1
COMMA ,
INTTK int
IDENFR x2
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR x1
MINU -
IDENFR x2
SEMICN ;
IFTK if
LPARENT (
IDENFR sum
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR sum
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_none
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR flag
SEMICN ;
INTTK int
IDENFR temp
SEMICN ;
INTTK int
IDENFR x1
COMMA ,
IDENFR x2
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR x
LSS <
INTCON 4
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
NEQ !=
INTCON 4
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR flag
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR flag
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR x1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR double2
LPARENT (
IDENFR x1
RPARENT )
MOD %
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR double2
LPARENT (
IDENFR x1
RPARENT )
DIV /
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR flag
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR x1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR x2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR add
LPARENT (
IDENFR x1
COMMA ,
IDENFR x2
RPARENT )
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR flag
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR x1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR x2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR sub
LPARENT (
IDENFR x1
COMMA ,
IDENFR x2
RPARENT )
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
