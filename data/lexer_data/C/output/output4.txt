CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f2
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR f3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
RETURNTK return
PLUS +
IDENFR a
SEMICN ;
RETURNTK return
MINU -
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR f5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR c
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
ELSETK else
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
ELSETK else
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR c
SEMICN ;
ELSETK else
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f4
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f6
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
IDENFR f6
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373457\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
COMMA ,
IDENFR k
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Empty for pass!\n"
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "One stmt for pass!\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f2
LPARENT (
RPARENT )
EQL ==
MINU -
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and no params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Please input 5 number (no zero)\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
IDENFR i
LSS <
IDENFR j
MULT *
IDENFR j
DIV /
LPARENT (
INTCON 5
MINU -
INTCON 4
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR f3
LPARENT (
IDENFR f4
LPARENT (
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Basic for and one params function pass!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 5
SEMICN ;
IDENFR k
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR f5
LPARENT (
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
RPARENT )
EQL ==
IDENFR i
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Basic for and multiple params function pass!\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR f6
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Recursive Success, count = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "This C level file include decl, if, for ,continue, break, basic cond. No block\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Pass Success!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
