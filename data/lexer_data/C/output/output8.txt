CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ciexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR cb
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR iexp
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
MOD %
INTCON 1
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
VOIDTK void
IDENFR funv
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funv\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR funi
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "funi\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR funvnop
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ma1
COMMA ,
IDENFR ma2
COMMA ,
IDENFR ma3
COMMA ,
IDENFR ma4
SEMICN ;
IDENFR ma1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma2
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IDENFR ma3
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ma4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma2
RPARENT )
LBRACE {
INTTK int
IDENFR mif1
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mif1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
EQL ==
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funi
LPARENT (
IDENFR ma1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
NEQ !=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GEQ >=
IDENFR ma3
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LEQ <=
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma1
GRE >
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ma2
LSS <
IDENFR ma3
RPARENT )
LBRACE {
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IDENFR funvnop
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
IDENFR ma4
ASSIGN =
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR ma1
EQL ==
IDENFR ma4
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "try\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
