INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR m
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR m
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR m
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR check_group
LPARENT (
INTTK int
IDENFR t
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR t
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR tmp
ASSIGN =
IDENFR isPrime
LPARENT (
IDENFR tmp
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR test
LPARENT (
INTTK int
IDENFR t
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR t
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR num
SEMICN ;
IDENFR num
ASSIGN =
INTCON 30
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR isPrime
LPARENT (
IDENFR num
RPARENT )
RPARENT )
SEMICN ;
IDENFR num
ASSIGN =
INTCON 31
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR isPrime
LPARENT (
IDENFR num
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 111
COMMA ,
INTCON 2222
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
IDENFR check_group
LPARENT (
IDENFR tmp
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR check_group
LPARENT (
IDENFR tmp
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR check_group
LPARENT (
IDENFR tmp
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR t
GRE >
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR t
LSS <
INTCON 10
RPARENT )
BREAKTK break
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "t:%d\n"
COMMA ,
IDENFR t
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
