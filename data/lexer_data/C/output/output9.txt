CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 5
SEMICN ;
VOIDTK void
IDENFR dd
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is d\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR ee
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR aa
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
ASSIGN =
INTCON 2
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR bb
LPARENT (
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
INTTK int
IDENFR cc
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR l
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR l
SEMICN ;
RETURNTK return
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR e
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 3
COMMA ,
IDENFR k
ASSIGN =
INTCON 2
COMMA ,
IDENFR l
ASSIGN =
INTCON 4
COMMA ,
IDENFR z
ASSIGN =
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR aa
LPARENT (
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR bb
LPARENT (
IDENFR j
RPARENT )
PLUS +
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR cc
LPARENT (
IDENFR k
COMMA ,
IDENFR l
RPARENT )
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR z
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR dd
LPARENT (
RPARENT )
SEMICN ;
IDENFR ee
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
