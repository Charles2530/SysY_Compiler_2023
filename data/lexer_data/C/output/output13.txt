CONSTTK const
INTTK int
IDENFR singleConstDecl
ASSIGN =
INTCON 23
SEMICN ;
CONSTTK const
INTTK int
IDENFR singleConstDecl_0
ASSIGN =
INTCON 13
COMMA ,
IDENFR singleConstDecl_1
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR singleVarDecl
ASSIGN =
INTCON 3
MINU -
INTCON 13
SEMICN ;
INTTK int
IDENFR singleVarDecl_0
ASSIGN =
INTCON 23
COMMA ,
IDENFR singleVarDecl_1
ASSIGN =
PLUS +
MINU -
PLUS +
LPARENT (
INTCON 3
MINU -
INTCON 13
RPARENT )
COMMA ,
IDENFR singleVarDecl_2
SEMICN ;
VOIDTK void
IDENFR funcDef_void
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR funcDef_0
LPARENT (
INTTK int
IDENFR var
RPARENT )
LBRACE {
INTTK int
IDENFR ans
ASSIGN =
IDENFR var
MULT *
INTCON 10
SEMICN ;
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
IDENFR funcDef_1
LPARENT (
INTTK int
IDENFR var1
COMMA ,
INTTK int
IDENFR var2
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
IDENFR var1
MULT *
IDENFR var2
SEMICN ;
INTTK int
IDENFR b
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
IFTK if
LPARENT (
IDENFR var2
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR a
PLUS +
IDENFR var1
MOD %
IDENFR var2
SEMICN ;
IDENFR c
ASSIGN =
IDENFR var1
DIV /
IDENFR var2
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
IDENFR a
PLUS +
IDENFR var1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR var1
DIV /
INTCON 2
SEMICN ;
RBRACE }
IDENFR b
ASSIGN =
IDENFR b
MINU -
IDENFR a
SEMICN ;
LBRACE {
SEMICN ;
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 0
RPARENT )
IDENFR a
ASSIGN =
MINU -
IDENFR a
SEMICN ;
RETURNTK return
LPARENT (
INTCON 1
PLUS +
IDENFR a
RPARENT )
MULT *
LPARENT (
IDENFR b
PLUS +
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printInt
LPARENT (
INTTK int
IDENFR var
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "print int : %d\n"
COMMA ,
IDENFR var
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373479\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 10
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR e
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR e
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR b
GRE >
INTCON 5
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR a
SEMICN ;
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GEQ >=
IDENFR a
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
DIV /
LPARENT (
IDENFR a
PLUS +
INTCON 1
RPARENT )
PLUS +
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
LBRACE {
IDENFR d
ASSIGN =
IDENFR d
MULT *
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR d
ASSIGN =
IDENFR d
MOD %
LPARENT (
IDENFR a
PLUS +
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR e
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
IDENFR e
ASSIGN =
IDENFR e
PLUS +
IDENFR a
SEMICN ;
IFTK if
LPARENT (
IDENFR e
EQL ==
IDENFR b
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR e
NEQ !=
IDENFR c
RPARENT )
LBRACE {
IDENFR e
ASSIGN =
IDENFR c
PLUS +
IDENFR e
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
IDENFR printInt
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
IDENFR printInt
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR e
RPARENT )
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR funcDef_1
LPARENT (
IDENFR e
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
INTTK int
IDENFR g
ASSIGN =
IDENFR funcDef_1
LPARENT (
IDENFR f
COMMA ,
IDENFR funcDef_0
LPARENT (
IDENFR c
RPARENT )
RPARENT )
SEMICN ;
IDENFR funcDef_void
LPARENT (
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR f
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR g
RPARENT )
SEMICN ;
IDENFR singleVarDecl_2
ASSIGN =
IDENFR funcDef_1
LPARENT (
IDENFR funcDef_1
LPARENT (
IDENFR singleVarDecl
COMMA ,
IDENFR singleVarDecl_2
RPARENT )
COMMA ,
IDENFR funcDef_1
LPARENT (
IDENFR singleConstDecl_0
COMMA ,
IDENFR singleConstDecl_1
RPARENT )
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR singleVarDecl_2
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
