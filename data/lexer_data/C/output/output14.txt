VOIDTK void
IDENFR fun1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR j
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
INTCON 4
COMMA ,
IDENFR l
ASSIGN =
INTCON 6
SEMICN ;
IDENFR l
ASSIGN =
IDENFR k
SEMICN ;
IDENFR j
ASSIGN =
INTCON 3
SEMICN ;
IDENFR j
ASSIGN =
LPARENT (
IDENFR j
MOD %
INTCON 20
RPARENT )
MINU -
INTCON 1
PLUS +
INTCON 9
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
INTCON 7
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
EQL ==
IDENFR i
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
IDENFR j
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "j : %d, k : %d, l : %d\n"
COMMA ,
IDENFR j
COMMA ,
IDENFR k
COMMA ,
IDENFR l
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR fun2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR num
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR a
GEQ >=
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MULT *
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR num
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "a! = %d, num = %d\n"
COMMA ,
IDENFR b
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR gcd
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
MOD %
IDENFR b
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
RETURNTK return
IDENFR gcd
LPARENT (
IDENFR b
COMMA ,
IDENFR a
MOD %
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR lcm
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR gcds
ASSIGN =
IDENFR gcd
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
MULT *
IDENFR b
DIV /
IDENFR gcds
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
MINU -
IDENFR c
RPARENT )
MULT *
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR fun5
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 2
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR fun5
LPARENT (
IDENFR a
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR fun5
LPARENT (
IDENFR a
MINU -
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR fun1
LPARENT (
RPARENT )
SEMICN ;
IDENFR fun2
LPARENT (
INTCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR fun3
LPARENT (
INTCON 2
COMMA ,
IDENFR fun3
LPARENT (
INTCON 3
COMMA ,
INTCON 6
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "scanf a, b to get gcd and lcm\n"
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "gcd is %d\n"
COMMA ,
IDENFR gcd
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "lcm is %d\n"
COMMA ,
IDENFR lcm
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR fun4
LPARENT (
IDENFR temp
COMMA ,
INTCON 3
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "scanf a to get Fibonacci\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR fib
SEMICN ;
IDENFR fib
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fib is %d\n"
COMMA ,
IDENFR fun5
LPARENT (
IDENFR fib
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
