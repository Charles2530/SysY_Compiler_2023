CONSTTK const
INTTK int
IDENFR AZ
ASSIGN =
INTCON 100
SEMICN ;
CONSTTK const
INTTK int
IDENFR AZA1
ASSIGN =
INTCON 200
COMMA ,
IDENFR AZA2
ASSIGN =
INTCON 300
SEMICN ;
INTTK int
IDENFR az
SEMICN ;
INTTK int
IDENFR aza
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR azaz1
COMMA ,
IDENFR azaz2
ASSIGN =
INTCON 200
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
MULT *
INTCON 8
SEMICN ;
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
CONTINUETK continue
SEMICN ;
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
SEMICN ;
ELSETK else
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "hello? "
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890
ASSIGN =
INTCON 43
SEMICN ;
INTTK int
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR a1b3
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
INTCON 0
SEMICN ;
INTCON 1234567890
SEMICN ;
RETURNTK return
INTCON 100
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR in
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "func3 input = %d\n"
COMMA ,
IDENFR in
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 7
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 8
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
LSS <
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
GRE >
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
LEQ <=
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
GEQ >=
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
EQL ==
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
NEQ !=
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
INTTK int
IDENFR param1
COMMA ,
INTTK int
IDENFR param2
COMMA ,
INTTK int
IDENFR param3
RPARENT )
LBRACE {
INTTK int
IDENFR temp1
ASSIGN =
LPARENT (
IDENFR param1
MULT *
IDENFR param2
RPARENT )
DIV /
LPARENT (
IDENFR param2
RPARENT )
MOD %
LPARENT (
IDENFR param1
RPARENT )
PLUS +
IDENFR param3
MINU -
IDENFR param3
MULT *
LPARENT (
IDENFR param1
DIV /
IDENFR param3
DIV /
IDENFR param3
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR temp2
ASSIGN =
LPARENT (
IDENFR AZ
PLUS +
IDENFR AZA1
MINU -
IDENFR AZA2
RPARENT )
MULT *
IDENFR AZ
MULT *
LPARENT (
INTCON 18
DIV /
INTCON 6
RPARENT )
MINU -
INTCON 16
MULT *
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
INTTK int
IDENFR temp3
SEMICN ;
IDENFR temp3
ASSIGN =
IDENFR AZ
MULT *
IDENFR AZA1
MOD %
IDENFR AZA2
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR temp3
PLUS +
INTCON 4
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
MINU -
PLUS +
MINU -
PLUS +
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
IDENFR c
MULT *
IDENFR b
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR e
DIV /
IDENFR b
SEMICN ;
INTTK int
IDENFR g
ASSIGN =
IDENFR f
MOD %
IDENFR c
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR f
PLUS +
IDENFR g
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR f
MINU -
IDENFR g
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d %d %d %d %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR f
COMMA ,
IDENFR g
COMMA ,
IDENFR h
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func1 done!\n"
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func2 done!\n"
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
IDENFR az
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func3 done!\n"
RPARENT )
SEMICN ;
IDENFR func4
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func4 done!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
