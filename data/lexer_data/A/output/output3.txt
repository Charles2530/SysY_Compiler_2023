CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
ASSIGN =
INTCON 2
COMMA ,
IDENFR a3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR a4
ASSIGN =
INTCON 2
COMMA ,
IDENFR a5
ASSIGN =
INTCON 3
COMMA ,
IDENFR a6
ASSIGN =
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR test1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR test3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR test4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
MULT *
IDENFR c
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test6
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373119"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR xm
ASSIGN =
INTCON 0
COMMA ,
IDENFR xmm
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR yxm
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
IDENFR yxmm
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR yxmmm
SEMICN ;
INTTK int
IDENFR b1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR c1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 12
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
MULT *
IDENFR y
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
DIV /
IDENFR y
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
MOD %
IDENFR y
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
PLUS +
IDENFR y
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
PLUS +
IDENFR y
PLUS +
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
MINU -
IDENFR y
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
MULT *
IDENFR y
MULT *
IDENFR x
DIV /
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR x
PLUS +
IDENFR y
RPARENT )
DIV /
IDENFR x
MULT *
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR x
MINU -
IDENFR y
RPARENT )
MULT *
IDENFR x
PLUS +
IDENFR x
MOD %
INTCON 7
SEMICN ;
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
IDENFR test1
LPARENT (
IDENFR a
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IDENFR test2
LPARENT (
RPARENT )
SEMICN ;
IDENFR b1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR c1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
ASSIGN =
IDENFR c1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR test5
LPARENT (
IDENFR a
COMMA ,
IDENFR b1
COMMA ,
IDENFR c1
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR test3
LPARENT (
IDENFR b1
COMMA ,
IDENFR c1
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR test3
LPARENT (
IDENFR c1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR c1
RPARENT )
SEMICN ;
IDENFR test4
LPARENT (
IDENFR a
COMMA ,
IDENFR b1
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR c1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR test6
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR c1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
OR ||
IDENFR x
LSS <
IDENFR y
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
PLUS +
INTCON 1
OR ||
NOT !
IDENFR x
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 0
AND &&
IDENFR b1
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
INTCON 6
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
OR ||
IDENFR a
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 7
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR xm
ASSIGN =
INTCON 0
SEMICN ;
IDENFR xm
LSS <
INTCON 1
SEMICN ;
IDENFR xm
ASSIGN =
IDENFR xm
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR xm
ASSIGN =
INTCON 0
SEMICN ;
IDENFR xm
LSS <
INTCON 1
SEMICN ;
IDENFR xm
ASSIGN =
IDENFR xm
PLUS +
INTCON 1
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR xm
LSS <
INTCON 2
SEMICN ;
IDENFR xm
ASSIGN =
IDENFR xm
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
OR ||
IDENFR x
LSS <
IDENFR y
RPARENT )
LBRACE {
IDENFR xm
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR xm
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR xm
ASSIGN =
IDENFR xm
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR xmm
ASSIGN =
INTCON 2
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR xm
ASSIGN =
INTCON 1
SEMICN ;
IDENFR xm
LSS <
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IDENFR xmm
ASSIGN =
INTCON 2
SEMICN ;
IDENFR b1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR xm
ASSIGN =
IDENFR xm
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR xm
LSS <
INTCON 2
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR xm
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d%d"
COMMA ,
IDENFR a
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
