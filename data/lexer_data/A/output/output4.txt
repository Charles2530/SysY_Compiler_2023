INTTK int
IDENFR next
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR len
ASSIGN =
INTCON 3
COMMA ,
IDENFR next1
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR xxx
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 0
COMMA ,
IDENFR arr
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR getDif3N
LPARENT (
INTTK int
IDENFR min
COMMA ,
INTTK int
IDENFR max
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR cnt
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
INTCON 3
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LEQ <=
INTCON 3
SEMICN ;
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR k
LEQ <=
INTCON 3
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
IDENFR j
AND &&
IDENFR i
NEQ !=
IDENFR k
AND &&
IDENFR j
NEQ !=
IDENFR k
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR cnt
SEMICN ;
RBRACE }
INTTK int
IDENFR judgeB
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MINU -
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
GEQ >=
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MINU -
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printArr
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printArr2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 4
SEMICN ;
RPARENT )
LBRACE {
IDENFR printArr
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printHello
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR name
SEMICN ;
IDENFR name
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Hello %d\n"
COMMA ,
IDENFR name
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR add
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR ans
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR n
PLUS +
INTCON 3
SEMICN ;
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR opp
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ans
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
IDENFR ans
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR y
RPARENT )
LBRACE {
IDENFR y
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR y
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR y
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR xx
SEMICN ;
IDENFR xx
ASSIGN =
LPARENT (
INTCON 16
PLUS +
INTCON 2
RPARENT )
DIV /
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
MINU -
INTCON 14
PLUS +
IDENFR next
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 3
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR j
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR ans
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR add
LPARENT (
IDENFR ans
RPARENT )
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR getDif3N
LPARENT (
INTCON 1
COMMA ,
INTCON 999
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR judgeB
LPARENT (
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "judgeB 2,3 = %d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR printHello
LPARENT (
RPARENT )
SEMICN ;
IDENFR printArr2
LPARENT (
IDENFR next
RPARENT )
SEMICN ;
IDENFR printArr
LPARENT (
IDENFR next
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR printArr
LPARENT (
IDENFR arr
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
