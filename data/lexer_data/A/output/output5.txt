CONSTTK const
INTTK int
IDENFR c_common
ASSIGN =
INTCON 10
COMMA ,
IDENFR c_array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c_matrix
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR v_common
COMMA ,
IDENFR v_array
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR v_matrix
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR v_commonInit
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR v_arrayInit
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR v_matrixInit
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR print
LPARENT (
INTTK int
IDENFR output
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\nf2() flag : %d"
COMMA ,
IDENFR output
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR f0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR f2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
INTTK int
IDENFR flag
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
IDENFR c
ASSIGN =
MINU -
LPARENT (
IDENFR a
MULT *
IDENFR b
RPARENT )
PLUS +
IDENFR a
DIV /
IDENFR b
PLUS +
LPARENT (
IDENFR a
MOD %
IDENFR b
RPARENT )
MINU -
INTCON 1
PLUS +
IDENFR f1
LPARENT (
IDENFR a1
COMMA ,
IDENFR a2
COMMA ,
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MINU -
PLUS +
IDENFR f0
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 10
AND &&
IDENFR b
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR print
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 10
AND &&
IDENFR b
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR print
LPARENT (
INTCON 2
RPARENT )
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 10
AND &&
IDENFR b
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR print
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 10
AND &&
IDENFR b
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR print
LPARENT (
INTCON 4
RPARENT )
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR flag
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR flag1
COMMA ,
IDENFR flag2
COMMA ,
IDENFR flag
COMMA ,
IDENFR i
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 3
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR c1
SEMICN ;
INTTK int
IDENFR c2
SEMICN ;
IDENFR c1
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IDENFR c2
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
IDENFR flag1
ASSIGN =
IDENFR f2
LPARENT (
IDENFR c1
COMMA ,
IDENFR c2
RPARENT )
SEMICN ;
IDENFR flag2
ASSIGN =
IDENFR f2
LPARENT (
IDENFR c2
COMMA ,
IDENFR c1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR flag1
EQL ==
INTCON 0
OR ||
NOT !
IDENFR flag2
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\nflag = %d : c1 = %d, c2 = %d"
COMMA ,
IDENFR flag
COMMA ,
IDENFR c1
COMMA ,
IDENFR c2
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 5
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 5
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 10
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
