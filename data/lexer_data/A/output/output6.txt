VOIDTK void
IDENFR de
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR keke
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
IDENFR j
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR jian
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
COMMA ,
IDENFR y
COMMA ,
IDENFR z
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR z
ASSIGN =
IDENFR x
MINU -
IDENFR y
SEMICN ;
RETURNTK return
IDENFR z
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR f
COMMA ,
IDENFR g
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR h
COMMA ,
IDENFR j
COMMA ,
IDENFR k
COMMA ,
IDENFR l
COMMA ,
IDENFR o
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 2
COMMA ,
IDENFR n
COMMA ,
IDENFR m
COMMA ,
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
IDENFR n
MOD %
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR m
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "0\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR c
ASSIGN =
IDENFR jian
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR c
PLUS +
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
IDENFR c
MULT *
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR e
LSS <
INTCON 5
RPARENT )
LBRACE {
IDENFR f
ASSIGN =
IDENFR c
MOD %
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
IDENFR f
ASSIGN =
IDENFR c
DIV /
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR f
NEQ !=
NOT !
INTCON 3
RPARENT )
IDENFR g
ASSIGN =
IDENFR g
PLUS +
INTCON 1
SEMICN ;
IDENFR o
ASSIGN =
IDENFR i
PLUS +
LPARENT (
IDENFR j
PLUS +
INTCON 1
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
EQL ==
IDENFR d
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR d
GEQ >=
IDENFR e
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR e
LEQ <=
IDENFR f
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR f
NEQ !=
IDENFR g
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR c
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RBRACE }
IDENFR keke
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n%d\n%d\n%d\n"
COMMA ,
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR f
COMMA ,
IDENFR g
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19182620\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19182620\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19182620\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
