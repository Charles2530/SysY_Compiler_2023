CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a2
ASSIGN =
PLUS +
INTCON 3
COMMA ,
IDENFR a3
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR b1
ASSIGN =
INTCON 0
PLUS +
INTCON 2
COMMA ,
IDENFR b2
ASSIGN =
MINU -
INTCON 5
COMMA ,
IDENFR b3
ASSIGN =
PLUS +
INTCON 6
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 10
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR n
SEMICN ;
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR n
LSS <
IDENFR b3
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Continue is error!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR n
LSS <
IDENFR a1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Break is error!And < is error!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR n
EQL ==
IDENFR a2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "+ is correct!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "+ is error!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR n
EQL ==
IDENFR b1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR n
NEQ !=
IDENFR b1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Break is error!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Continue is error!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "a1+b1 is %d\n"
COMMA ,
IDENFR a1
PLUS +
IDENFR b1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a2+b2 is %d\n"
COMMA ,
IDENFR a2
PLUS +
IDENFR b2
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
