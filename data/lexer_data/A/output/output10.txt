INTTK int
IDENFR a
LBRACK [
INTCON 510
RBRACK ]
SEMICN ;
INTTK int
IDENFR prime
LBRACK [
INTCON 510
RBRACK ]
SEMICN ;
CONSTTK const
INTTK int
IDENFR reflect1
LBRACK [
INTCON 16
RBRACK ]
ASSIGN =
LBRACE {
MINU -
INTCON 711942876
COMMA ,
MINU -
INTCON 1060809599
COMMA ,
INTCON 1758839997
COMMA ,
INTCON 423174272
COMMA ,
INTCON 1412407466
COMMA ,
INTCON 375872692
COMMA ,
INTCON 1543568839
COMMA ,
INTCON 915987033
COMMA ,
INTCON 698198080
COMMA ,
MINU -
INTCON 2143283456
COMMA ,
INTCON 2059223660
COMMA ,
MINU -
INTCON 34179219
COMMA ,
INTCON 378910912
COMMA ,
INTCON 1498631475
COMMA ,
MINU -
INTCON 1853883889
COMMA ,
INTCON 1640319187
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR reflect2
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 1152785601
COMMA ,
INTCON 1891446969
COMMA ,
INTCON 938484211
COMMA ,
MINU -
INTCON 1596516698
COMMA ,
INTCON 1681072330
RBRACE }
COMMA ,
LBRACE {
INTCON 128222498
COMMA ,
INTCON 1090169129
COMMA ,
MINU -
INTCON 347746822
COMMA ,
MINU -
INTCON 326257601
COMMA ,
MINU -
INTCON 1366930863
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 823961496
COMMA ,
INTCON 2103453081
COMMA ,
MINU -
INTCON 402114823
COMMA ,
INTCON 2139806715
COMMA ,
MINU -
INTCON 732814375
RBRACE }
COMMA ,
LBRACE {
INTCON 1302967469
COMMA ,
INTCON 1623817872
COMMA ,
INTCON 898372270
COMMA ,
MINU -
INTCON 812618050
COMMA ,
MINU -
INTCON 1403178881
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1776328495
COMMA ,
INTCON 958769364
COMMA ,
INTCON 47496017
COMMA ,
MINU -
INTCON 1384738865
COMMA ,
INTCON 1751940200
RBRACE }
RBRACE }
SEMICN ;
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 2
COMMA ,
IDENFR total
SEMICN ;
IDENFR total
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR total
SEMICN ;
RPARENT )
LBRACE {
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR con
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR total
SEMICN ;
RPARENT )
LBRACE {
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IDENFR prime
LBRACK [
IDENFR con
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IDENFR con
ASSIGN =
IDENFR con
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LSS <
IDENFR con
AND &&
IDENFR i
MULT *
IDENFR prime
LBRACK [
IDENFR j
RBRACK ]
LEQ <=
IDENFR total
SEMICN ;
RPARENT )
LBRACE {
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IDENFR a
LBRACK [
IDENFR i
MULT *
IDENFR prime
LBRACK [
IDENFR j
RBRACK ]
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR i
MOD %
IDENFR prime
LBRACK [
IDENFR j
RBRACK ]
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
INTCON 114514
SEMICN ;
RPARENT )
LBRACE {
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR i
COMMA ,
LPARENT (
IDENFR i
MOD %
INTCON 2
RPARENT )
MULT *
IDENFR reflect1
LBRACK [
IDENFR i
MOD %
INTCON 16
RBRACK ]
PLUS +
LPARENT (
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 2
RPARENT )
MULT *
IDENFR reflect2
LBRACK [
IDENFR i
MOD %
INTCON 5
RBRACK ]
LBRACK [
IDENFR i
MOD %
INTCON 5
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
CONTINUETK continue
SEMICN ;
ELSETK else
BREAKTK break
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
CONTINUETK continue
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
BREAKTK break
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
CONTINUETK continue
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
BREAKTK break
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
CONTINUETK continue
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
BREAKTK break
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
CONTINUETK continue
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
BREAKTK break
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
