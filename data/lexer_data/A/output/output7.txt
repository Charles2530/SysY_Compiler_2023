INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 6
SEMICN ;
INTTK int
IDENFR s1
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 6
COMMA ,
INTCON 12
RBRACE }
SEMICN ;
INTTK int
IDENFR s2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
RBRACE }
COMMA ,
LBRACE {
INTCON 13
COMMA ,
INTCON 14
COMMA ,
INTCON 15
RBRACE }
RBRACE }
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 1
AND &&
NOT !
LPARENT (
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 2
RPARENT )
AND &&
NOT !
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "! is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "! has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
PLUS +
IDENFR b
LSS <
IDENFR s1
LBRACK [
INTCON 5
RBRACK ]
AND &&
IDENFR s1
LBRACK [
INTCON 3
RBRACK ]
MINU -
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
LSS <
IDENFR s2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
DIV /
IDENFR a
EQL ==
INTCON 0
AND &&
IDENFR b
LSS <
IDENFR a
PLUS +
IDENFR b
LSS <
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
AND &&
INTCON 0
EQL ==
IDENFR b
LSS <
IDENFR a
PLUS +
IDENFR b
LSS <
IDENFR s1
LBRACK [
INTCON 2
RBRACK ]
GRE >
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "< is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "< has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
MULT *
IDENFR b
GRE >
IDENFR s1
LBRACK [
INTCON 2
RBRACK ]
MULT *
IDENFR s2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
EQL ==
INTCON 0
AND &&
LPARENT (
IDENFR s2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR s1
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MOD %
IDENFR a
GRE >
IDENFR s2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
DIV /
IDENFR a
AND &&
IDENFR s1
LBRACK [
INTCON 5
RBRACK ]
GRE >
IDENFR a
PLUS +
IDENFR b
PLUS +
INTCON 2
GRE >
INTCON 0
EQL ==
INTCON 0
AND &&
IDENFR s1
LBRACK [
INTCON 5
RBRACK ]
GRE >
IDENFR a
PLUS +
IDENFR b
LSS <
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "> is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "> has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
AND &&
IDENFR a
LEQ <=
IDENFR b
PLUS +
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
AND &&
IDENFR a
LEQ <=
IDENFR b
LEQ <=
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
AND &&
IDENFR a
LEQ <=
IDENFR b
GEQ >=
IDENFR s1
LBRACK [
INTCON 2
RBRACK ]
LSS <
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "<= is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "<= has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GEQ >=
IDENFR a
PLUS +
INTCON 1
AND &&
IDENFR b
GEQ >=
IDENFR s1
LBRACK [
INTCON 4
RBRACK ]
PLUS +
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 1
AND &&
IDENFR a
LEQ <=
IDENFR b
GEQ >=
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
PLUS +
INTCON 1
EQL ==
INTCON 0
AND &&
IDENFR a
GEQ >=
IDENFR b
GEQ >=
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
LEQ <=
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
NEQ !=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ">= is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ">= has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
AND &&
IDENFR a
EQL ==
IDENFR b
EQL ==
INTCON 0
AND &&
IDENFR a
GRE >
IDENFR b
EQL ==
IDENFR a
LSS <
IDENFR b
NEQ !=
INTCON 1
AND &&
IDENFR a
GEQ >=
IDENFR b
EQL ==
IDENFR s1
LBRACK [
INTCON 2
RBRACK ]
NEQ !=
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
NEQ !=
IDENFR s1
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "== != is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "== != has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR s1
LBRACK [
INTCON 3
RBRACK ]
EQL ==
IDENFR s2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
OR ||
IDENFR a
GEQ >=
IDENFR b
OR ||
IDENFR a
PLUS +
INTCON 7
MOD %
INTCON 4
LSS <
IDENFR b
MULT *
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "or is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "or has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
DIV /
INTCON 2
LSS <
IDENFR b
MINU -
INTCON 3
OR ||
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 1
GRE >
IDENFR s1
LBRACK [
INTCON 5
RBRACK ]
AND &&
IDENFR b
GRE >
IDENFR s1
LBRACK [
INTCON 5
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "the priority of and/or is ok\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "the priority of and/or has problem\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
OR ||
PLUS +
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR s1
LBRACK [
INTCON 0
RBRACK ]
LSS <
IDENFR s1
LBRACK [
INTCON 1
RBRACK ]
AND &&
PLUS +
IDENFR b
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
