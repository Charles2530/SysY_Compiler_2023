INTTK int
IDENFR a_global
SEMICN ;
CONSTTK const
INTTK int
IDENFR b_global
ASSIGN =
INTCON 1
SEMICN ;
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR arrrr
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR arrrr
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR func6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR gett
SEMICN ;
IDENFR gett
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR aa
ASSIGN =
INTCON 0
COMMA ,
IDENFR bb
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR aaa
ASSIGN =
INTCON 0
COMMA ,
IDENFR bbb
ASSIGN =
INTCON 1
COMMA ,
IDENFR ccc
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr_a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr_aa
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR arr_bb
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arrrr_a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR arrrr_aa
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
COMMA ,
IDENFR arrrr_bb
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR dd
ASSIGN =
INTCON 0
COMMA ,
IDENFR ee
ASSIGN =
INTCON 1
COMMA ,
IDENFR ff
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR ddd
COMMA ,
IDENFR eee
ASSIGN =
INTCON 1
SEMICN ;
IDENFR ddd
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR arr_d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR arr_dd
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR arr_ee
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR arr_ddd
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR arr_eee
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
IDENFR arr_ddd
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR arr_eee
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR arrrr_d
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arrrr_dd
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
COMMA ,
IDENFR arrrr_ee
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arrrr_ddd
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
COMMA ,
IDENFR arrrr_eee
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
IDENFR arrrr_ddd
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR arrrr_eee
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
INTCON 1
COMMA ,
IDENFR arrrr_d
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR arrrr_d
RPARENT )
SEMICN ;
IDENFR func4
LPARENT (
RPARENT )
SEMICN ;
IDENFR func5
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR func6
LPARENT (
INTCON 1
COMMA ,
IDENFR arr_d
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
LEQ <=
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LEQ <=
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR j
LEQ <=
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 3
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
INTCON 1
PLUS +
INTCON 2
MULT *
LPARENT (
MINU -
INTCON 3
RPARENT )
DIV /
INTCON 4
MOD %
INTCON 5
SEMICN ;
IDENFR d
ASSIGN =
MINU -
PLUS +
MINU -
IDENFR d
SEMICN ;
IFTK if
LPARENT (
INTCON 3
NEQ !=
INTCON 4
OR ||
LPARENT (
NOT !
IDENFR a
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
OR ||
INTCON 1
GRE >
INTCON 3
AND &&
INTCON 1
LEQ <=
INTCON 2
OR ||
INTCON 1
GEQ >=
INTCON 3
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR d
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21182621\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
